 %INSTRUCTIONS: Your task is to do Named Entity Recognition. You extract named entities from the provided competency question answers. 
        Use provided concepts to understand which named entities to extract from competency answers. 
        Concepts: Method, RawData, DataFormat, DataAnnotationTechnique, DataAugmentationTechnique, Dataset, PreprocessingStep, DataSplitCriteria, CodeRepository, DataRepository, CodeRepositoryLink, DataRepositoryLink, DeepLearningModel, Hyperparameter, HyperparameterOptimization, OptimizationTechnique, TrainingCompletionCriteria, RegularizationMethod, ModelPerformanceMonitoringStrategy, Framework, HardwareResource, PostprocessingStep, PerformanceMetric, GeneralizabilityMeasure, RandomnessStrategy, ModelPurpose, DataBiasTechnique, ModelDeploymentProcess, DeploymentPlatform.         
        Example: DeepLearningModel(CNN, RNN, Transformer), Framework(TensorFlow, PyTorch), PerformanceMetric(Accuracy, mean IoU)
        Below are the competency questions and answers: 
CQ: What data formats are used in the deep learning pipeline (e.g, image, audio, video, csv)?
Answer: The deep learning pipeline uses both audio data and magnitude spectrogram images. The audio data is in the form of wav files, and the spectrogram images are represented as 512x720 resolution images.

CQ: What are the data augmentation techniques applied in the deep learning pipeline (e.g, Fliping, Roating, Scaling)?
Answer: The paper does not provide specific information on the data augmentation techniques applied in the deep learning pipeline. However, it mentions that the training data was collected as part of the Indicator Bats Programme (iBats) and was uploaded to the Zooniverse citizen science platform for public users to view and annotate. The audio data was split up into 3. 84s long sound clips, and each sound clip was uploaded as both a wav file and a magnitude spectrogram image. The paper also mentions that the original recordings were time-expanded, reducing the frequency and making the sounds audible to users. However, it does not provide details on any specific data augmentation techniques applied during the deep learning pipeline.

CQ: What are the datasets used in the deep learning pipeline (e.g, MNIST, CIFAR, ImageNet)?
Answer: The datasets used in the deep learning pipeline are not explicitly mentioned in the provided context. However, it is mentioned that the BatDetect CNNs were trained using a subset of full- spectrum time-expanded (TE) ultrasonic acoustic data recorded between 2005-2011 along road-transects by citizen scientists as part of the Indicator Bats Programme (iBats). The audio data contained many instances of low amplitude and faint bat calls, as well as other night-time 'background' noises such as other biotic, abiotic, and anthropogenic sounds. The audio data were split up into 3. 84s long sound clips to include the 3. 2s of TE audio and buffered by sensor-listening silence on either side. Each sound clip was then uploaded as both a wav file and a magnitude spectrogram image onto the Bat Detective project website. The original recordings were time-expanded, therefore reducing the frequency, sounds in the files were in the audible spectrum and could be easily heard by users. Users were presented with a spectrogram and its corresponding audio file, and asked to annotate the presence of bat calls in each 3. 84s clip (corresponding to 320ms of real-time recordings).

CQ: What preprocessing steps are involved before training a deep learning model (e.g., normalization, scaling, cleaning)?
Answer: The provided context does not explicitly mention the preprocessing steps involved before training a deep learning model. However, common preprocessing steps in deep learning include normalization, scaling, and cleaning of the data. Normalization is the process of rescaling the data to a standard range, often between 0 and 1. Scaling is the process of adjusting the range of the data, which can be useful when the data has a large range. Cleaning the data involves removing any irrelevant or incorrect data points, as well as handling missing data. These preprocessing steps can help improve the performance and efficiency of the deep learning model.

CQ: What is the code repository link of the deep learning pipeline (e.g., Link to GitHub, GitLab, BitBucket)?
Answer: The code repository link of the deep learning pipeline is <https://github. com/macaig/batdetect>.

CQ: What type of deep learning model is used in the pipeline (e.g., CNN, RNN, Transformer)?
Answer: The pipeline uses a deep convolutional neural network (CNN) model.

CQ: What are the hyperparameters used in the deep learning model (e.g., learning rate, optimizer)?
Answer: The paper does not provide information on the hyperparameters used in the deep learning model, such as learning rate and optimizer.

CQ: What optimization techniques are applied in the deep learning pipeline (e.g., SGD, Adam)?
Answer: The context does not provide information on the specific optimization techniques applied in the deep learning pipeline.

CQ: What are the regularization methods used to prevent overfitting  in the deep learning pipeline (e.g., dropout, L2 regularization)?
Answer: The provided context does not mention any specific regularization methods used to prevent overfitting in the deep learning pipeline. Therefore, I don't know the answer to this question based on the given context.

CQ: Which frameworks are used to build the deep learning model (e.g., TensorFlow, PyTorch)?
Answer: The paper does not provide information on the specific frameworks used to build the deep learning model.

CQ: Which hardware resources are used for training the deep learning model (e.g., GPUs, TPUs)?
Answer: The deep learning model was trained using an Intel i7 processor, 32Gb of RAM, and a Nvidia GTX 1080 GPU.

CQ: What metrics are used to evaluate the performance of the deep learning model (e.g., accuracy, precision, recall)?
Answer: The performance of the deep learning model is evaluated using precision and recall metrics. The results show that the deep learning networks consistently outperformed other baselines in terms of recall, i. e. , increasing the proportion of detected bat calls in the test datasets. Although the precision of the commercial systems was often relatively high, the CNNs were able to detect much fainter and partially noise-masked bat calls that were missed by the other methods, with fewer false positives, and very quickly, particularly with CNNFAST.

CQ: What is the purpose of the deep learning model (e.g., classification, segmentation, detection)?
Answer: The purpose of the deep learning model is for automatic bat search-phase echolocation call detection, specifically for localization in time, in noisy, real-world recordings.

Provide your answer as follows:
        Named Entities: For each provided Concept(Corresponding Named Entity,..), ...